[{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Joseph Balamuta. Author, maintainer, copyright holder.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Balamuta J (2024). explorecourses: Stanford Course Explorer API. R package version 0.0.0.9000, https://r-pkg.thecoatlessprofessor.com/explorecourses/, https://github.com/coatless-rpkg/explorecourses.","code":"@Manual{,   title = {explorecourses: Stanford Course Explorer API},   author = {James Joseph Balamuta},   year = {2024},   note = {R package version 0.0.0.9000, https://r-pkg.thecoatlessprofessor.com/explorecourses/},   url = {https://github.com/coatless-rpkg/explorecourses}, }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/index.html","id":"explorecourses-","dir":"","previous_headings":"","what":"Stanford Course Explorer API","title":"Stanford Course Explorer API","text":"[!IMPORTANT] package part homework exercise STATS 290 regarding data mining web APIs. goal explorecourses automatically retrieve course information Stanford University’s ExploreCourses API.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stanford Course Explorer API","text":"can install development version explorecourses GitHub :","code":"# install.packages(\"remotes\") remotes::remotes(\"coatless-rpkg/explorecourses\")"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Stanford Course Explorer API","text":"First, load package: package contains three main functions: fetch_all_courses(): Fetches courses ExploreCourses API set departments (Default: ). fetch_department_courses(): Fetches courses specific department. fetch_departments(): Fetches list departments ExploreCourses API. default, ’ll retrieve courses across departments current academic year using: can also request specific courses set departments given academic year. example, retrieve courses departments “STATS” “MATH” academic year 2023-2024, can use: function excellent retrieving course information across multiple departments given academic year allows parallel processing data. single department, can use fetch_department_courses() function retrieve courses department academic year. function’s overhead lower support parallel processing. example, retrieve courses “STATS” department, can use: determine possible department shortcodes, can use: return data frame department short name, long name, school department associated .","code":"library(explorecourses) all_courses <- fetch_all_courses() stats_and_math_courses <- fetch_all_courses(c(\"STATS\", \"MATH\"), year = \"20232024\") department_courses <- fetch_department_courses(\"STATS\") departments <- fetch_departments()"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/index.html","id":"cache","dir":"","previous_headings":"Usage","what":"Cache","title":"Stanford Course Explorer API","text":"cache data, can use cache_dir parameter fetch_all_courses(), fetch_department_courses(), fetch_departments() functions. cause XML data downloaded API stored specified directory reused subsequent calls. can list current cache contents using list_cache() function:","code":"list_cache() # List current cache # Cache contents: #  # Found 256 cached files # Directory: explorecourses_cache #  # AA ACCT AFRICAAM ALP AMELANG # AMHRLANG AMSTUD ANES ANTHRO APPPHYS # ARABLANG ARCHLGY ARMELANG ARTHIST ARTSINST # ..."},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/index.html","id":"parallel-processing","dir":"","previous_headings":"Usage","what":"Parallel Processing","title":"Stanford Course Explorer API","text":"can speed process fetching transforming course data using parallel processing. fetch_all_courses() function, ’ve set parallel processing using furrr package, provides purrr’s functional interface future parallel processing library. result, able download process courses every department parallel. Moreover, ’ve set progress reporting using progressr package track progress parallel processing. Please note, need ensure deactivate multisession plan resetting sequential ’ve finished using .","code":"library(explorecourses) library(future) library(progressr)  # Set up parallel processing plan(multisession)  # Set up progress reporting handlers(handler_progress())  # Show progress bar for fetching all courses with_progress({   # Fetch all courses for the departments in parallel   all_courses <- fetch_all_courses() })  # Reset to sequential processing plan(sequential)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Stanford Course Explorer API","text":"AGPL (>= 3)","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/cache_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if cache exists for specific data — cache_exists","title":"Check if cache exists for specific data — cache_exists","text":"Checks existence cached XML files cache directory. Can check files specific department, academic year, combination . filters specified, checks cache files exist.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/cache_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if cache exists for specific data — cache_exists","text":"","code":"cache_exists(name = NULL, year = NULL, cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/cache_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if cache exists for specific data — cache_exists","text":"name Character string. Optional department code (e.g., \"CS\") check specific department cache files. year Character string. Optional academic year YYYYYYYY format (e.g., \"20232024\") check cache files specific year. cache_dir Character string. Optional path cache directory. NULL, uses default cache location.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/cache_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if cache exists for specific data — cache_exists","text":"logical value: TRUE matching cache files exist FALSE matching files found check fails","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/cache_exists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if cache exists for specific data — cache_exists","text":"function supports three checking modes based parameter combinations: Department-specific: name provided Checks : \"{name}.xml\" \"{name}_{year}.xml\" year provided Year-specific: year provided Checks : files matching \"*_{year}.xml\" General check: neither name year provided Checks : \"*.xml\" files cache directory error (e.g., permission issues), function: Issues warning error details Returns FALSE allow graceful error handling","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/cache_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if cache exists for specific data — cache_exists","text":"","code":"if (FALSE) { # \\dontrun{ # Check if any cache exists if (cache_exists()) {   # Process cached data }  # Check specific department cache if (cache_exists(name = \"CS\")) {   cached_data <- read_xml_cache(\"CS\") }  # Check specific year if (cache_exists(year = \"20232024\")) {   # Process cached data for year }  # Check specific department and year if (cache_exists(name = \"CS\", year = \"20232024\")) {   cached_data <- read_xml_cache(\"CS\", \"20232024\") } } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear cache for specific data or entirely — clear_cache","title":"Clear cache for specific data or entirely — clear_cache","text":"Removes cached XML files cache directory. Can selectively clear files specific department, academic year, combination . filters specified, clears cached XML files.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear cache for specific data or entirely — clear_cache","text":"","code":"clear_cache(name = NULL, year = NULL, cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/clear_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear cache for specific data or entirely — clear_cache","text":"name Character string. Optional department code (e.g., \"CS\") clear specific department cache files. year Character string. Optional academic year YYYYYYYY format (e.g., \"20232024\") clear cache files specific year. cache_dir Character string. Optional path cache directory. NULL, uses default cache location.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/clear_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear cache for specific data or entirely — clear_cache","text":"Invisibly returns TRUE operation successful. Throws error operation fails.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/clear_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clear cache for specific data or entirely — clear_cache","text":"function supports three clearing modes based parameter combinations: Department-specific: name provided Clears: \"{name}.xml\" \"{name}_{year}.xml\" year provided Year-specific: year provided Clears: files matching \"*_{year}.xml\" Complete clear: neither name year provided Clears: \"*.xml\" files cache directory function : Initialize/verify cache directory Determine files remove based parameters Remove matching files Display success message number files removed","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/clear_cache.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Clear cache for specific data or entirely — clear_cache","text":"files deleted cache directory accessed. error include specific error message cache directory path.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/clear_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear cache for specific data or entirely — clear_cache","text":"","code":"if (FALSE) { # \\dontrun{ # Clear all cache files clear_cache()  # Clear specific department's cache clear_cache(name = \"CS\")  # Clear all departments for specific year clear_cache(year = \"20232024\")  # Clear specific department and year clear_cache(name = \"CS\", year = \"20232024\")  # Clear cache from custom location clear_cache(cache_dir = \"~/my_course_cache\") } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/explorecourses-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Stanford — explorecourses-package","title":"Stanford — explorecourses-package","text":"package contains R code specific Stanford University web applications.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/explorecourses-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stanford — explorecourses-package","text":"Maintainer: James Joseph Balamuta james.balamuta@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_basic_course_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract basic course information from XML node — extract_basic_course_info","title":"Extract basic course information from XML node — extract_basic_course_info","text":"Extracts fundamental course information Stanford course XML node structured tibble. function handles core course attributes common courses, independent sections schedules.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_basic_course_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract basic course information from XML node — extract_basic_course_info","text":"","code":"extract_basic_course_info(course)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_basic_course_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract basic course information from XML node — extract_basic_course_info","text":"course xml2 node object representing single course. Expected contain child nodes : courseId year subject code title description unitsMin unitsMax","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_basic_course_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract basic course information from XML node — extract_basic_course_info","text":"tibble one row containing: objectID: Character. Unique course identifier courseId year: Character. Academic year subject: Character. Subject code (e.g., \"CS\") code: Character. Course number (e.g., \"106A\") title: Character. Full course title description: Character. Course description text units_min: Numeric. Minimum units course units_max: Numeric. Maximum units course","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_basic_course_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract basic course information from XML node — extract_basic_course_info","text":"function extracts following course attributes using XPath: Course ID (unique identifier) Academic year Subject code Course code (number) Course title Course description Unit range (minimum maximum) text fields extracted using xml_find_first() get first matching node, unit values converted numeric format.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_basic_course_info.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Extract basic course information from XML node — extract_basic_course_info","text":"function uses tryCatch handle potential XML parsing errors. required node missing parsed, throws error details failure.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_basic_course_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract basic course information from XML node — extract_basic_course_info","text":"","code":"if (FALSE) { # \\dontrun{ course_node <- xml2::xml_find_first(xml_doc, \"//course\") basic_info <- extract_basic_course_info(course_node) } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_schedule_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract schedule and instructor data from a section XML node — extract_schedule_data","title":"Extract schedule and instructor data from a section XML node — extract_schedule_data","text":"Processes schedule instructor information Stanford course section XML node. function extracts meeting times, locations, detailed instructor information, combining multiple instructors' data semicolon-separated lists.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_schedule_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract schedule and instructor data from a section XML node — extract_schedule_data","text":"","code":"extract_schedule_data(section)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_schedule_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract schedule and instructor data from a section XML node — extract_schedule_data","text":"section xml2 node object representing course section. Expected contain child nodes : schedule nodes, containing: days startTime endTime location Optional instructor nodes, containing: name sunet role","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_schedule_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract schedule and instructor data from a section XML node — extract_schedule_data","text":"tibble containing schedule information, NULL schedules found. tibble includes: Basic schedule information: section_id: Character. Section identifier (classId) days: Character. Days week (e.g., \"MonWedFri\") start_time: Character. Start time end_time: Character. End time location: Character. Meeting location Instructor information (NA instructors): instructors: Character. Combined strings \"name (role)\" format instructor_names: Character. Semicolon-separated list names instructor_sunets: Character. Semicolon-separated list SUNet IDs instructor_roles: Character. Semicolon-separated list roles","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_schedule_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract schedule and instructor data from a section XML node — extract_schedule_data","text":"function performs following steps: Locates schedule nodes within section schedule: Extracts basic schedule information (days, times, location) Processes instructor information present Combines multiple instructors' data consolidated strings Instructor information formatted several ways: Combined format: \"name (role)\" Separate fields: names, SUNet IDs, roles semicolon-separated lists instructors found, instructor fields set NA.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_schedule_data.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Extract schedule and instructor data from a section XML node — extract_schedule_data","text":"schedule data extraction fails, function throws error details.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_schedule_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract schedule and instructor data from a section XML node — extract_schedule_data","text":"","code":"if (FALSE) { # \\dontrun{ section_node <- xml2::xml_find_first(course_node, \".//section\") schedule_data <- extract_schedule_data(section_node) } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract section and schedule data from a course XML node — extract_section_data","title":"Extract section and schedule data from a course XML node — extract_section_data","text":"Processes section-level information Stanford course XML node, including section details associated schedule information. function handles extraction combination section metadata corresponding schedule data.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract section and schedule data from a course XML node — extract_section_data","text":"","code":"extract_section_data(course, course_id)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract section and schedule data from a course XML node — extract_section_data","text":"course xml2 node object representing single course. Expected contain child section nodes, potentially containing schedule information. course_id Character string. course identifier used link section data back parent course.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract section and schedule data from a course XML node — extract_section_data","text":"tibble containing section schedule information, NULL sections found. tibble includes: section information: objectID: Character. Course identifier (course_id) term: Character. Academic term term_id: Character. Term identifier section_number: Character. Section number component: Character. Section component (e.g., \"LEC\", \"DIS\") class_id: Character. Unique class identifier current_class_size: Numeric. Current enrollment max_class_size: Numeric. Maximum enrollment schedule data exists, additional columns include: Schedule timing information Location data Instructor information","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract section and schedule data from a course XML node — extract_section_data","text":"function performs following steps: Locates section nodes within course section: Extracts basic section information using extract_section_info() Extracts schedule data using extract_schedule_data() Joins section schedule information schedule data exists Combines section data single tibble function returns NULL sections found, allowing courses may active sections.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_data.html","id":"data-joining","dir":"Reference","previous_headings":"","what":"Data Joining","title":"Extract section and schedule data from a course XML node — extract_section_data","text":"Section schedule data joined using class identifier, class_id section data matching section_id schedule data.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_data.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Extract section and schedule data from a course XML node — extract_section_data","text":"section data extraction fails, function throws error details.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract section and schedule data from a course XML node — extract_section_data","text":"","code":"if (FALSE) { # \\dontrun{ course_node <- xml2::xml_find_first(xml_doc, \"//course\") course_id <- \"222796\" section_data <- extract_section_data(course_node, course_id) } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract basic section information from XML node — extract_section_info","title":"Extract basic section information from XML node — extract_section_info","text":"Extracts fundamental section-level information Stanford course section XML node structured tibble. function processes core attributes course section, term information, component type, enrollment data.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract basic section information from XML node — extract_section_info","text":"","code":"extract_section_info(section, course_id)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract basic section information from XML node — extract_section_info","text":"section xml2 node object representing single course section. Expected contain child nodes : term termId sectionNumber component classId currentClassSize maxClassSize course_id Character string. parent course identifier used link section data back course.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract basic section information from XML node — extract_section_info","text":"tibble one row containing: objectID: Character. Course identifier (course_id) term: Character. Academic term (e.g., \"Autumn\", \"Winter\") term_id: Character. Unique term identifier section_number: Character. Section number within course component: Character. Section type (e.g., \"LEC\", \"DIS\", \"LAB\") class_id: Character. Unique identifier section current_class_size: Numeric. Current number enrolled students max_class_size: Numeric. Maximum enrollment capacity","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract basic section information from XML node — extract_section_info","text":"function extracts following section attributes using XPath: Term details (term name ID) Section identification (section number, class ID) Component type (e.g., lecture, discussion) Enrollment information (current maximum class sizes) text fields extracted using xml_find_first() get first matching node. Enrollment numbers converted numeric format.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_info.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Extract basic section information from XML node — extract_section_info","text":"function assumes required nodes present XML. Missing nodes trigger error tryCatch block.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/extract_section_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract basic section information from XML node — extract_section_info","text":"","code":"if (FALSE) { # \\dontrun{ section_node <- xml2::xml_find_first(course_node, \".//section\") course_id <- \"CS106A-2023-2024\" section_info <- extract_section_info(section_node, course_id) } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_all_courses.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and process courses for multiple departments in parallel — fetch_all_courses","title":"Fetch and process courses for multiple departments in parallel — fetch_all_courses","text":"Retrieves courses multiple departments concurrently using parallel processing. departments specified, fetches courses available departments. Provides progress updates processing handles errors gracefully.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_all_courses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and process courses for multiple departments in parallel — fetch_all_courses","text":"","code":"fetch_all_courses(departments = NULL, year = NULL, cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_all_courses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and process courses for multiple departments in parallel — fetch_all_courses","text":"departments Character vector. Department codes fetch (e.g., c(\"CS\", \"MATH\")). NULL, fetches available departments. year Character string. Optional academic year YYYYYYYY format (e.g., \"20232024\"). NULL, fetches data current academic year. cache_dir Character string. Optional path cache directory. provided, enables caching department fetches.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_all_courses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch and process courses for multiple departments in parallel — fetch_all_courses","text":"tibble (data frame) containing course information columns: objectID: Unique course identifier year: Academic year subject: Department code code: Course number title: Course title description: Course description units_min: Minimum units units_max: Maximum units department: Department code course term: Academic term (e.g., \"Autumn\", \"Winter\") term_id: Numeric term identifier section_number: Section identifier component: Course component type (e.g., \"LEC\", \"DIS\", \"LAB\") class_id: Unique identifier section current_class_size: Current enrollment max_class_size: Maximum enrollment capacity Schedule information: days: Days week (e.g., \"Mon, Wed, Fri\") start_time: Start time class end_time: End time class location: Class location/room Instructor information: instructors: Combined instructor information roles instructor_names: Names instructors instructor_sunets: SUNet IDs instructors instructor_roles: Roles instructors Returns NULL courses found department.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_all_courses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch and process courses for multiple departments in parallel — fetch_all_courses","text":"function follows process: Input preparation: Validates year format provided Fetches departments none specified Cleans department list (removes duplicates invalid codes) Parallel processing: Uses furrr parallel execution Shows progress updates via progressr Safely handles errors per department Results handling: Reports department-specific errors Combines successful results Returns NULL valid results Progress updates show: Current department processed Extraction results Final merging step","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_all_courses.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Fetch and process courses for multiple departments in parallel — fetch_all_courses","text":"function trigger errors : Department-specific processing errors courses found across departments Year validation issues","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_all_courses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch and process courses for multiple departments in parallel — fetch_all_courses","text":"","code":"if (FALSE) { # \\dontrun{ # Fetch all departments all_courses <- fetch_all_courses()  # Fetch specific departments stem_courses <- fetch_all_courses(   departments = c(\"CS\", \"MATH\", \"PHYSICS\") )  # Fetch with year and caching courses_2023 <- fetch_all_courses(   year = \"20232024\",   cache_dir = \"course_cache\" )  # Process results with dplyr library(dplyr)  # Count courses per department dept_summary <- all_courses %>%   group_by(department) %>%   summarise(     n_courses = n_distinct(objectID),     n_sections = n()   )  # Find large classes large_classes <- all_courses %>%   filter(current_class_size >= 100) %>%   select(department, code, title, current_class_size) } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch courses for a specific department — fetch_department_courses","title":"Fetch courses for a specific department — fetch_department_courses","text":"Retrieves courses specified department Stanford ExploreCourses, either cache available API. Supports fetching courses specific academic years handles caching automatically cache directory specified.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch courses for a specific department — fetch_department_courses","text":"","code":"fetch_department_courses(name, year = NULL, cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch courses for a specific department — fetch_department_courses","text":"name Character string. Department code (e.g., \"CS\"). Must single, non-empty string. multiple codes provided, first used. year Character string. Optional academic year YYYYYYYY format (e.g., \"20232024\"). NULL, fetches data current academic year. cache_dir Character string. Optional path cache directory. provided, function : Try read existing course data cache Cache fresh API data cache miss occurs NULL, always fetches fresh data API.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch courses for a specific department — fetch_department_courses","text":"tibble (data frame) containing course information columns: objectID: Unique course identifier year: Academic year subject: Department code code: Course number title: Course title description: Course description units_min: Minimum units units_max: Maximum units department: Department code course term: Academic term (e.g., \"Autumn\", \"Winter\") term_id: Numeric term identifier section_number: Section identifier component: Course component type (e.g., \"LEC\", \"DIS\", \"LAB\") class_id: Unique identifier section current_class_size: Current enrollment max_class_size: Maximum enrollment capacity Schedule information: days: Days week (e.g., \"Mon, Wed, Fri\") start_time: Start time class end_time: End time class location: Class location/room Instructor information: instructors: Combined instructor information roles instructor_names: Names instructors instructor_sunets: SUNet IDs instructors instructor_roles: Roles instructors Returns NULL courses found.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch courses for a specific department — fetch_department_courses","text":"function follows process: Input validation: Ensures single department code Validates code format content Data retrieval: Checks cache cache_dir provided Fetches API cache miss Caches new data applicable Data processing: Parses XML structured format Validates course data exists","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses.html","id":"warning-handlers","dir":"Reference","previous_headings":"","what":"Warning handlers","title":"Fetch courses for a specific department — fetch_department_courses","text":"Warning message shown : Multiple department codes provided courses found department","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Fetch courses for a specific department — fetch_department_courses","text":"Invalid department code (empty non-string) API fetch failures Cache operation failures XML processing errors","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch courses for a specific department — fetch_department_courses","text":"","code":"if (FALSE) { # \\dontrun{ # Fetch current year's CS courses cs_courses <- fetch_department_courses(\"CS\")  # Fetch specific academic year cs_courses_2023 <- fetch_department_courses(   name = \"CS\",   year = \"20232024\" )  # Fetch with caching enabled cs_courses <- fetch_department_courses(   name = \"CS\",   cache_dir = \"course_cache\" )  # Handle empty results courses <- fetch_department_courses(\"DEPT\") if (!is.null(courses)) {   # Process courses }  # Find all courses taught by a specific instructor cs_courses %>%   dplyr::filter(grepl(\"Smith\", instructor_names))  # Get all lecture sections lectures <- cs_courses %>%   dplyr::filter(component == \"LEC\") } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","title":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","text":"Makes direct API call retrieve courses specific department academic year Stanford's ExploreCourses system. Returns raw XML response without processing.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","text":"","code":"fetch_department_courses_raw(name, year = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","text":"name Character string. Department code (e.g., \"CS\" Computer Science). Must valid Stanford department code. year Character string NULL. Academic year format YYYYYYYY (e.g., \"20232024\"). NULL, defaults current academic year. validated using validate_academic_year().","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","text":"xml2::xml_document object containing raw courses XML. XML structure includes: Root courses element containing multiple course elements course element contains: Basic course information (ID, title, description) Units information Section data Schedule information Instructor details","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","text":"function: Validates academic year format Constructs API URL using COURSE_ENDPOINT template Makes API request course data API returns active courses specified department, including detailed information : Course metadata (title, description, units) Sections components Meeting schedules Instructor information","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses_raw.html","id":"api-endpoint","dir":"Reference","previous_headings":"","what":"API Endpoint","title":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","text":"Uses COURSE_ENDPOINT template, expands :","code":"https://explorecourses.stanford.edu/search?view=xml-20140630   &academicYear={year}   &q={name}   &filter-departmentcode-{name}=on   &filter-coursestatus-Active=on"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses_raw.html","id":"filters","dir":"Reference","previous_headings":"","what":"Filters","title":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","text":"API request automatically includes filters : Department code match Active courses ","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_department_courses_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch raw course data for a department from Stanford ExploreCourses API — fetch_department_courses_raw","text":"","code":"if (FALSE) { # \\dontrun{ # Get current year CS courses cs_xml <- fetch_department_courses_raw(\"CS\")  # Get specific year Math courses math_xml <- fetch_department_courses_raw(\"MATH\", \"20232024\") } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch department list from Stanford ExploreCourses — fetch_departments","title":"Fetch department list from Stanford ExploreCourses — fetch_departments","text":"Retrieves list departments Stanford ExploreCourses, either cache available API. function handles caching automatically cache directory specified.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch department list from Stanford ExploreCourses — fetch_departments","text":"","code":"fetch_departments(cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch department list from Stanford ExploreCourses — fetch_departments","text":"cache_dir Character string. Optional path cache directory. provided, function : Try read existing department data cache Cache fresh API data cache miss occurs NULL, always fetches fresh data API.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch department list from Stanford ExploreCourses — fetch_departments","text":"tibble (data frame) containing department information columns: name: Department code (e.g., \"CS\") longname: Full department name (e.g., \"Computer Science\") school: School name (e.g., \"School Engineering\")","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch department list from Stanford ExploreCourses — fetch_departments","text":"function follows process: cache_dir provided: Attempts read cached department data cache miss, proceeds API fetch API fetch (needed): Requests department list ExploreCourses API Caches response cache_dir provided Data processing: Parses XML response structured data frame Organizes departments school","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Fetch department list from Stanford ExploreCourses — fetch_departments","text":"API request fails returns invalid data. Includes specific error message relevant details. cache operations fail cache_dir provided. Includes cache path specific error message.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch department list from Stanford ExploreCourses — fetch_departments","text":"","code":"if (FALSE) { # \\dontrun{ # Fetch fresh data from API (no caching) departments <- fetch_departments()  # Fetch with caching enabled departments <- fetch_departments(cache_dir = \"course_cache\")  # Example data processing # Find all engineering departments eng_deps <- subset(departments, school == \"School of Engineering\")  # Get department codes dept_codes <- departments$name } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch raw department list from Stanford ExploreCourses API — fetch_departments_raw","title":"Fetch raw department list from Stanford ExploreCourses API — fetch_departments_raw","text":"Makes direct API call retrieve complete list Stanford departments associated schools. Returns raw XML response without processing transformation.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch raw department list from Stanford ExploreCourses API — fetch_departments_raw","text":"","code":"fetch_departments_raw()"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch raw department list from Stanford ExploreCourses API — fetch_departments_raw","text":"xml2::xml_document object containing raw departments XML. XML structure includes: Root schools element Multiple school elements, containing: @name attribute: School name Multiple department elements, containing: @name attribute: Department code @longname attribute: Full department name","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch raw department list from Stanford ExploreCourses API — fetch_departments_raw","text":"function thin wrapper around make_api_request() specifically departments endpoint. retrieves current academic year's department structure including: Schools Departments within school Department codes full names department list relatively static, changing Stanford's organizational structure changes.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments_raw.html","id":"api-endpoint","dir":"Reference","previous_headings":"","what":"API Endpoint","title":"Fetch raw department list from Stanford ExploreCourses API — fetch_departments_raw","text":"Uses DEPARTMENTS_ENDPOINT constant, points : https://explorecourses.stanford.edu/?view=xml-20140630","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/fetch_departments_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch raw department list from Stanford ExploreCourses API — fetch_departments_raw","text":"","code":"if (FALSE) { # \\dontrun{ xml_doc <- fetch_departments_raw() schools <- xml2::xml_find_all(xml_doc, \"//school\") } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/generate_academic_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate academic year string from start year — generate_academic_year","title":"Generate academic year string from start year — generate_academic_year","text":"Converts single starting year Stanford academic year format combining following year. Takes year (YYYY) returns full academic year string (YYYYYYYY).","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/generate_academic_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate academic year string from start year — generate_academic_year","text":"","code":"generate_academic_year(start_year)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/generate_academic_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate academic year string from start year — generate_academic_year","text":"start_year Numeric character. Starting year YYYY (e.g., 2023). provided character, converted integer.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/generate_academic_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate academic year string from start year — generate_academic_year","text":"Character string. Eight-digit academic year format YYYYYYYY first four digits start year last four digits start year plus one.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/generate_academic_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate academic year string from start year — generate_academic_year","text":"function: Converts input year integer Creates 8-digit string combining start year (start year + 1) Ensures proper zero-padding years using sprintf() example: 2023 -> \"20232024\" 2024 -> \"20242025\"","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/generate_academic_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate academic year string from start year — generate_academic_year","text":"","code":"generate_academic_year(2023)  # Returns \"20232024\" #> [1] \"20232024\" generate_academic_year(2024)  # Returns \"20242025\" #> [1] \"20242025\" generate_academic_year(\"2025\")  # Returns \"20252026\" #> [1] \"20252026\""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/init_cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize cache directory for ExploreCourses data — init_cache_dir","title":"Initialize cache directory for ExploreCourses data — init_cache_dir","text":"Creates initializes directory structure caching ExploreCourses XML data. function ensures consistent location storing cached course department data sessions. cache directory specified, creates default directory named 'explorecourses_cache' current working directory.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/init_cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize cache directory for ExploreCourses data — init_cache_dir","text":"","code":"init_cache_dir(cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/init_cache_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize cache directory for ExploreCourses data — init_cache_dir","text":"cache_dir Character string. Optional path desired cache directory. NULL (default), uses '{working_directory}/explorecourses_cache'.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/init_cache_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize cache directory for ExploreCourses data — init_cache_dir","text":"Character string containing path initialized cache directory.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/init_cache_dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize cache directory for ExploreCourses data — init_cache_dir","text":"function performs following operations: cache_dir NULL, constructs default path using DEFAULT_CACHE_DIR Creates directory exist (including parent directories) Ensures directory writable Returns full path created/existing directory function uses fs::dir_create() safe concurrent access handles nested directory creation automatically.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/init_cache_dir.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Initialize cache directory for ExploreCourses data — init_cache_dir","text":"directory creation fails due permissions filesystem errors. error include attempted path specific error message.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/init_cache_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize cache directory for ExploreCourses data — init_cache_dir","text":"","code":"if (FALSE) { # \\dontrun{ # Use default cache location cache_dir <- init_cache_dir()  # Specify custom cache location cache_dir <- init_cache_dir(\"~/my_course_cache\") } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/list_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"List cached files — list_cache","title":"List cached files — list_cache","text":"Lists cached XML files cache directory, optionally filtered academic year. Returns character vector filenames without extensions, additional metadata attached attributes.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/list_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List cached files — list_cache","text":"","code":"list_cache(year = NULL, cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/list_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List cached files — list_cache","text":"year Character string. Optional academic year YYYYYYYY format (e.g., \"20232024\") list cache files specific year. cache_dir Character string. Optional path cache directory. NULL, uses default cache location.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/list_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List cached files — list_cache","text":"character vector class explorecourses_cache_list containing: File names without .xml extension Additional attributes: total: Number files found path: Full path cache directory year: Academic year filter (provided) Returns empty character vector (character(0)) files found.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/list_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List cached files — list_cache","text":"function supports two listing modes: Year-specific: year provided Lists: files matching \"*_{year}.xml\" Validates year format searching Complete listing: year provided Lists: \"*.xml\" files cache directory File names returned vector: .xml extension removed Retain year suffixes (e.g., \"CS_20232024\") returned order found filesystem","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/list_cache.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"List cached files — list_cache","text":"cache directory accessed listed. error include specific error message cache directory path.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/list_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List cached files — list_cache","text":"","code":"if (FALSE) { # \\dontrun{ # List all cached files files <- list_cache() print(files)  # Uses special print method for explorecourses_cache_list  # Get total number of cached files total <- attr(files, \"total\")  # List files for specific year files_2023 <- list_cache(year = \"20232024\")  # List files in custom cache directory files <- list_cache(cache_dir = \"~/my_course_cache\")  # Check if any files were found if (length(files) > 0) {   # Process files } } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/make_api_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","title":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","text":"Makes HTTP GET request Stanford ExploreCourses API endpoint returns response XML document. Handles response validation error cases.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/make_api_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","text":"","code":"make_api_request(url)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/make_api_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","text":"url Character string. Complete URL ExploreCourses API endpoint. Expected one : Departments endpoint: DEPARTMENTS_ENDPOINT Course search endpoint: COURSE_ENDPOINT parameters","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/make_api_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","text":"xml2::xml_document object containing parsed API response. structure depends specific endpoint called.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/make_api_request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","text":"function performs steps: Makes HTTP GET request using httr2 Validates HTTP response status (must 200) Converts response body XML document Error handling covers: Network/connection failures Non-200 HTTP status codes XML parsing errors errors converted standardized error messages endpoint information original error details.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/make_api_request.html","id":"rate-limiting","dir":"Reference","previous_headings":"","what":"Rate Limiting","title":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","text":"ExploreCourses API currently require authentication impose rate limits, considerate usage recommended.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/make_api_request.html","id":"response-format","dir":"Reference","previous_headings":"","what":"Response Format","title":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","text":"API returns XML data ExploreCourses schema version 20140630. exact structure varies endpoint: Departments: List schools containing departments Courses: List courses sections schedules","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/make_api_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make HTTP request to Stanford ExploreCourses API endpoint — make_api_request","text":"","code":"if (FALSE) { # \\dontrun{ # Get departments list deps_xml <- make_api_request(DEPARTMENTS_ENDPOINT)  # Get courses for CS department courses_url <- sprintf(COURSE_ENDPOINT, year = \"20232024\", name = \"CS\") cs_xml <- make_api_request(courses_url) } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/print.explorecourses_cache_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for cache list — print.explorecourses_cache_list","title":"Print method for cache list — print.explorecourses_cache_list","text":"custom print method objects class explorecourses_cache_list. Displays cache contents formatted, color-coded layout summary information files arranged columns.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/print.explorecourses_cache_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for cache list — print.explorecourses_cache_list","text":"","code":"# S3 method for class 'explorecourses_cache_list' print(x, ...)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/print.explorecourses_cache_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for cache list — print.explorecourses_cache_list","text":"x object class explorecourses_cache_list, typically returned list_cache(). ... Additional arguments passed print (currently unused).","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/print.explorecourses_cache_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for cache list — print.explorecourses_cache_list","text":"Invisibly returns input object x.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/print.explorecourses_cache_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print method for cache list — print.explorecourses_cache_list","text":"print method provides formatted display including: Header \"Cache contents:\" cyan Summary information blue: Total number cached files Academic year (filtered) Cache directory path Files listed columns (5 files per row) Special handling empty cache (warning message) Output formatting: Uses color emphasis (cyan blue) Properly pluralizes file counts Aligns files 25-character width columns Uses filesystem path formatting directory paths","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/print.explorecourses_cache_list.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Print method for cache list — print.explorecourses_cache_list","text":"method generic print() function automatically called printing objects class explorecourses_cache_list. typically called directly.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/print.explorecourses_cache_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for cache list — print.explorecourses_cache_list","text":"","code":"if (FALSE) { # \\dontrun{ # Normal usage through print generic cache_files <- list_cache() print(cache_files)  # Automatically calls this method  # Or simply cache_files  # Auto-printing also uses this method  # Example with year filter year_files <- list_cache(year = \"20232024\") print(year_files) } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_courses_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Stanford course XML data into a data frame — process_courses_xml","title":"Process Stanford course XML data into a data frame — process_courses_xml","text":"Parses XML data containing Stanford University course information structured data frame. function processes detailed course data including basic course information, section details, schedules, instructor information.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_courses_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Stanford course XML data into a data frame — process_courses_xml","text":"","code":"process_courses_xml(xml_doc, department)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_courses_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Stanford course XML data into a data frame — process_courses_xml","text":"xml_doc xml2 document object containing Stanford course data. Expected structure course nodes containing section schedule information. department Character string. Department code (e.g., \"CS\") used identify department courses XML.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_courses_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Stanford course XML data into a data frame — process_courses_xml","text":"tibble containing course information columns: objectID: Character. Unique course identifier year: Character. Academic year subject: Character. Subject code code: Character. Course number title: Character. Course title description: Character. Course description units_min: Numeric. Minimum units units_max: Numeric. Maximum units Additional columns section, schedule, instructor information available department: Character. Department code NULL courses found (warning)","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_courses_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Stanford course XML data into a data frame — process_courses_xml","text":"function processes course data several stages: Locates course nodes XML using XPath course: Extracts basic course information (ID, title, units, etc.) Extracts section data including schedules instructors Joins section data basic course information Adds department code courses Course sections may include: Term information Class components (e.g., lecture, discussion) Schedule details (days, times, locations) Instructor information Enrollment data","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_courses_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Stanford course XML data into a data frame — process_courses_xml","text":"","code":"if (FALSE) { # \\dontrun{ xml_data <- xml2::read_xml(\"cs_courses.xml\") cs_courses <- process_courses_xml(xml_data, \"CS\") } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_departments_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Stanford departments XML data into a data frame — process_departments_xml","title":"Process Stanford departments XML data into a data frame — process_departments_xml","text":"Parses XML data containing Stanford University department information structured data frame. function processes hierarchical XML data departments nested within schools, extracting department codes, full names, associated schools.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_departments_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Stanford departments XML data into a data frame — process_departments_xml","text":"","code":"process_departments_xml(xml_doc)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_departments_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Stanford departments XML data into a data frame — process_departments_xml","text":"xml_doc xml2 document object containing Stanford departments data. Expected structure school nodes containing department nodes.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_departments_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Stanford departments XML data into a data frame — process_departments_xml","text":"tibble three columns: name: Character. Department code/abbreviation (e.g., \"CS\") longname: Character. Full department name (e.g., \"Computer Science\") school: Character. Name school containing department","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_departments_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Stanford departments XML data into a data frame — process_departments_xml","text":"function performs following steps: Locates school nodes XML using XPath school, extracts name finds department nodes department, extracts: Department code (name) Full department name (longname) Associated school name (school) Combines departments single data frame function includes error handling : Missing school data Missing department data XML parsing errors","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_departments_xml.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Process Stanford departments XML data into a data frame — process_departments_xml","text":"schools departments found XML, error thrown.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/process_departments_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Stanford departments XML data into a data frame — process_departments_xml","text":"","code":"if (FALSE) { # \\dontrun{ xml_data <- xml2::read_xml(\"departments.xml\") departments_df <- process_departments_xml(xml_data) } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/read_xml_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Read XML data from cache — read_xml_cache","title":"Read XML data from cache — read_xml_cache","text":"Retrieves cached XML course data specific department optional academic year. Returns NULL requested cache file exist, allowing graceful fallback fresh API requests.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/read_xml_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read XML data from cache — read_xml_cache","text":"","code":"read_xml_cache(name, year = NULL, cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/read_xml_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read XML data from cache — read_xml_cache","text":"name Character string. Department code read cache (e.g., \"CS\" Computer Science). year Character string. Optional academic year YYYYYYYY format (e.g., \"20232024\"). provided, looks file \"_YYYYYYYY\" suffix. cache_dir Character string. Optional path cache directory. NULL, uses default cache location.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/read_xml_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read XML data from cache — read_xml_cache","text":"Returns one : xml2 document object containing cached data found NULL cache file exist","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/read_xml_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read XML data from cache — read_xml_cache","text":"function looks cache files using following pattern: {name}{_year}.xml. example: Without year: \"CS.xml\" year: \"CS_20232024.xml\" function : Initialize/verify cache directory Construct appropriate filename optional year suffix Check cache file exists Read parse XML file found Return NULL file found","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/read_xml_cache.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Read XML data from cache — read_xml_cache","text":"XML file exists read parsed. error include department name, file path, specific error message.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/read_xml_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read XML data from cache — read_xml_cache","text":"","code":"if (FALSE) { # \\dontrun{ # Read current year's CS department data xml_doc <- read_xml_cache(\"CS\")  # Read specific academic year xml_doc <- read_xml_cache(\"CS\", \"20232024\")  # Handle missing cache gracefully xml_doc <- read_xml_cache(\"CS\") if (is.null(xml_doc)) {   # Cache miss - fetch from API instead   xml_doc <- fetch_department_courses_raw(\"CS\") } } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/validate_academic_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Stanford academic year format — validate_academic_year","title":"Validate Stanford academic year format — validate_academic_year","text":"Validates academic year string meets Stanford's format requirements constraints. Checks string format logical relationship start end years. Also enforces historical data boundaries.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/validate_academic_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Stanford academic year format — validate_academic_year","text":"","code":"validate_academic_year(year)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/validate_academic_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Stanford academic year format — validate_academic_year","text":"year Character string NULL. Academic year validate: character: Must format YYYYYYYY (e.g., \"20232024\") NULL: Represents current academic year","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/validate_academic_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Stanford academic year format — validate_academic_year","text":"Character string. Returns: Empty string (\"\") input NULL Original year string validation passes","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/validate_academic_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Stanford academic year format — validate_academic_year","text":"function performs several validation checks: Format validation: Must exactly 8 digits (YYYYYYYY) Must contain numeric characters Logical validation: End year must exactly one year start year Start year must 1913 (earliest course data) Special handling: NULL input returns \"\" (representing current academic year) function provides detailed error messages validation fails, indicating specific validation rule violated.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/validate_academic_year.html","id":"error-messages","dir":"Reference","previous_headings":"","what":"Error Messages","title":"Validate Stanford academic year format — validate_academic_year","text":"function may throw errors : Invalid format (8 digits) Invalid year progression (end year != start year + 1) Start year 1913 error includes: Description problem Expected format/rules Received invalid value","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/validate_academic_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Stanford academic year format — validate_academic_year","text":"","code":"if (FALSE) { # \\dontrun{ validate_academic_year(\"20232024\")  # Returns \"20232024\" validate_academic_year(NULL)        # Returns \"\" validate_academic_year(\"2023\")      # Error: Invalid format validate_academic_year(\"20232025\")  # Error: Invalid year progression validate_academic_year(\"19121913\")  # Error: Start year too early } # }"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/write_xml_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Write XML data to cache — write_xml_cache","title":"Write XML data to cache — write_xml_cache","text":"Writes XML course data cache directory. function handles creation appropriately named cache files based department code optional academic year. Cache files stored XML documents extension .xml.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/write_xml_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write XML data to cache — write_xml_cache","text":"","code":"write_xml_cache(xml_doc, name, year = NULL, cache_dir = NULL)"},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/write_xml_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write XML data to cache — write_xml_cache","text":"xml_doc xml2 document object containing course department data cached. name Character string. Base filename cache file, typically department code (e.g., \"CS\" Computer Science). year Character string. Optional academic year YYYYYYYY format (e.g., \"20232024\"). provided, appends \"_YYYYYYYY\" filename. cache_dir Character string. Optional path cache directory. NULL, uses default cache location.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/write_xml_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write XML data to cache — write_xml_cache","text":"Invisibly returns full path created cache file character string.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/write_xml_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write XML data to cache — write_xml_cache","text":"function constructs cache filename using following pattern: {name}{_year}.xml. example: Without year: \"CS.xml\" year: \"CS_20232024.xml\" function : Initialize/create cache directory needed Construct appropriate filename optional year suffix Write XML document cache location Handle errors write process","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/write_xml_cache.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Write XML data to cache — write_xml_cache","text":"XML document written cache location. error include department name, attempted file path, specific error message.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/reference/write_xml_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write XML data to cache — write_xml_cache","text":"","code":"if (FALSE) { # \\dontrun{ # Cache current year's CS department data xml_doc <- fetch_department_courses_raw(\"CS\") write_xml_cache(xml_doc, \"CS\")  # Cache specific academic year xml_doc <- fetch_department_courses_raw(\"CS\", \"20232024\") write_xml_cache(xml_doc, \"CS\", \"20232024\") } # }"},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/explorecourses/news/index.html","id":"features-0-0-1","dir":"Changelog","previous_headings":"","what":"Features","title":"explorecourses 0.0.1","text":"fetch_all_courses(): Fetches courses ExploreCourses API set departments (Default: ). fetch_department_courses(): Fetches courses specific department. fetch_departments(): Fetches list departments ExploreCourses API.","code":""}]
